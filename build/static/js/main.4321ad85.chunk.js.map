{"version":3,"sources":["Assets/caret.svg","Assets/directory.svg","Components/Node/index.jsx","Redux/DirectoryTree/Actions/makeNewDirectory.js","Redux/DirectoryTree/Actions/index.js","Components/Tree/index.jsx","Components/index.jsx","Redux/DirectoryTree/DataStructure/node.js","Redux/DirectoryTree/index.js","Redux/DirectoryTree/DataStructure/tree.js","Redux/index.js","Redux/Store/index.js","serviceWorker.js","index.js"],"names":["module","exports","Node","state","show","newFolder","this","className","onClick","setState","src","down","style","transition","width","alt","props","node","value","onSubmit","e","preventDefault","directory","onChange","target","type","placeholder","makeNewDirectory","subDirectories","map","tree","children","transform","Component","connect","dispatch","name","parentName","payload","Tree","root","traverse","console","log","mainTree","initState","callback","goThrough","forEach","child","parentValue","newNode","push","childNode","index","splice","parent","combineReducers","action","addNode","ReduxLogger","createLogger","Store","createStore","Reducer","applyMiddleware","Thunk","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4321ad85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/caret.397d03b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/directory.4694ce78.svg\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { makeNewDirectory } from '../../Redux/DirectoryTree/Actions/makeNewDirectory';\n\nimport down from '../../Assets/caret.svg';\nimport directory from '../../Assets/directory.svg';\nimport './index.css';\n\n\nclass Node extends Component {\n    state = {\n        show: true,\n        newFolder: null,\n    };\n    render() {\n        if (!this.state.show) {\n            return (\n                <dl>\n                    <dt>\n                        <div className=\"row\">\n                            <div className=\"column column-10\" onClick={() => {\n                                this.setState({\n                                    show: true,\n                                });\n                            }} >\n                                <img src={down} style={{\n                                    transform: 'rotate(-90deg)',\n                                    transition: '0.2s',\n                                }} width=\"8px\" alt=\"caret-down\" />\n                            </div>\n                            <div className=\"column column-90\">\n                                <p>{`${this.props.node.value}/`}</p>\n                            </div>\n                        </div>\n                    </dt>\n                </dl>\n            );\n        }\n        return (\n            <dl>\n                <dt>\n                    <div className=\"row\">\n                        <div className=\"column column-10\" onClick={() => {\n                                this.setState({\n                                    show: false,\n                                });\n                            }} >\n                            <img src={down} style={{transition: '0.2s'}} width=\"8px\" alt=\"caret-down\" />\n                        </div>\n                        <div className=\"column column-90\">\n                            <p>{`${this.props.node.value}/`}</p>\n                        </div>\n                    </div>\n                </dt>\n                <dd>\n                    <form onSubmit={(e) => e.preventDefault()}>\n                        <div className=\"row\">\n                            <div className=\"column column-60\">\n                                <div className='row'>\n                                    <div className=\"column column-10\">\n                                        <img src={directory} alt=\"directory\" width=\"20px\" className=\"directory-img\" />\n                                    </div>\n                                    <div className=\"column column-50\">\n                                        <input onChange={(e) => {\n                                            this.setState({\n                                                newFolder: e.target.value,\n                                            });\n                                        }} value={!this.state.newFolder ? '' : this.state.newFolder} type=\"text\" placeholder=\"New Folder Name\" className=\"node-input\" />                        \n                                    </div>\n                                    <div className=\"column column-40\">\n                                        <label className=\"node-add\">\n                                            <button className=\"button button-outline\" onClick={() => {\n                                                if (!this.state.newFolder) {\n                                                    return;\n                                                }\n                                                this.props.makeNewDirectory(this.state.newFolder, this.props.node.value);\n                                                this.setState({\n                                                    newFolder: null,\n                                                });\n                                            }}>Add</button>\n                                        </label>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"column column-40\"/>\n                        </div>\n                    </form>\n                </dd>\n                {\n                    this.props.subDirectories.map((node) => {\n                        return <Node tree={this.props.tree} node={node} subDirectories={node.children} makeNewDirectory={this.props.makeNewDirectory} />;\n                    })\n                }\n            </dl>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        makeNewDirectory: (name, parentName) => dispatch(makeNewDirectory(name, parentName)),\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Node);","import { MAKE_NEW_DIRECTORY } from \".\";\n\nexport function makeNewDirectory(name, parentName) {\n    return {\n        type: MAKE_NEW_DIRECTORY,\n        payload: {\n            parentName,\n            name,\n        },\n    };\n}","/*\n*******************************************************************\n\nKEEP ALL CONSTANTS HERE WHICH ARE USED WHILE MAKING ACTION CREATORS\n\n*******************************************************************\n*/\nexport const MAKE_NEW_DIRECTORY = 'MAKE_NEW_DIRECTORY';","import React, { Component } from 'react';\n\nimport Node from '../Node/index';\n\nexport default class Tree extends Component {\n    constructor(props) {\n        super(props);\n        this.root = this.props.tree.root;\n    }\n\n    render() {\n        this.props.tree.traverse(this.root, (node) => {\n            console.log(node.value);\n        });\n\n        if (!this.root) {\n            return null;\n        }\n        return (\n            <Node tree={this.props.tree} node={this.root} subDirectories={this.root.children} />\n        );\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Tree from './Tree/index';\nimport './index.css';\n\nfunction App(props) {\n\treturn (\n\t\t<div className=\"container-fluid\">\n\t\t\t<div className=\"container text-center\">\n\t\t\t\t<h1><code>Directoryfy</code></h1>\n\t\t\t</div>\n\t\t\t<div className=\"container main-app-container\">\n\t\t\t\t<Tree tree={props.tree} />\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nconst mapStateToProps = (state) => {\n\tconst { mainTree } = state.tree;\n\treturn {\n\t\ttree: mainTree\n\t};\n};\n\nexport default connect(mapStateToProps)(App);\n","export class Node {\n    constructor(value, children) {\n        this.value = value;\n        this.children = children;\n    }\n}","import { Node } from './DataStructure/node';\nimport { Tree } from './DataStructure/tree';\nimport * as Actions from './Actions';\nconst root = new Node('root', []);\nconst directoryTree = new Tree(root);\nconst initState = {\n    mainTree: directoryTree,\n};\nexport default function folderReducer (state=initState, action) {\n    switch(action.type) {\n        case Actions.MAKE_NEW_DIRECTORY:\n            state.mainTree.addNode(action.payload.name, action.payload.parentName);\n            return {\n                mainTree: state.mainTree,\n            };\n        default:\n            return state;\n    }\n}","import { Node } from \"./node\";\n\nexport class Tree {\n    constructor(root) {\n        this.root = root || null;\n    }\n\n    traverse(root=this.root, callback) {\n        const goThrough = (node) => {\n            callback(node);\n            node.children.forEach((child) => {\n                goThrough(child);\n            });\n        };\n        goThrough(root);\n    }\n\n    addNode(value, parentValue) {\n        const newNode = {\n            value,\n            children: [],\n        };\n\n        if (!this.root) {\n            this.root = newNode;\n            return this.root;\n        }\n\n        this.traverse(this.root,(node) => {\n            if (node.value === parentValue) {\n                node.children.push(newNode);\n            }\n        });\n    }\n\n    removeNode(value) {\n        this.traverse(this.root,(node) => {\n            node.children.forEach((childNode, index) => {\n                if (childNode.value === value) {\n                    node.children.splice(index, 1);\n                }\n            });\n        })\n    }\n\n    getParent(value) {\n        if (value === this.root.value) {\n            return null;\n        }\n        let parent = new Node(null, []);\n        this.traverse(this.root, (node) => {\n            node.children.forEach((childNode) => {\n                if (childNode.value === value) {\n                    parent = node;\n                }\n            });            \n        });\n        return parent;\n    }\n}","import { combineReducers } from 'redux';\n\nimport tree from './DirectoryTree';\n\nexport default combineReducers({\n    tree\n});","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport Thunk from 'redux-thunk';\nimport Reducer from '../index';\n\nconst ReduxLogger = createLogger();\n\nexport const Store = createStore(\n    Reducer,\n    applyMiddleware(\n        Thunk,\n        ReduxLogger,\n    ),\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'milligram/dist/milligram.min.css';\nimport './index.css';\nimport App from './Components/index';\nimport { Provider } from 'react-redux';\nimport { Store } from './Redux/Store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={Store}>\n        <App />\n    </Provider>\n    \n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}